openapi: 3.0.3
info:
  contact:
    email: contact@mightycode.fr
    url: https://mightycode.fr/
  description: |
    This is a prototype of CPOO Project's front/back API.
  title: CPOO Server API
  version: 0.0.1
servers:
  - url: http://localhost:8080/
security:
  - CookieAuth: [ ]
tags:
  - name: authentication
    description: User's authentication management
  - name: conversation
    description: User's conversations management
  - name: message
    description: User's messages management
  - name: profile
    description: User's profile information management
  - name: contact
    description: User's contacts management

paths:
  /user/signup:
    post:
      security: [ ]
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullUserDTO'
      responses:
        '200':
          description: Success
        '409':
          description: Conflict, a user account with the same login already exists
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/signin:
    post:
      security: [ ]
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: Success
          headers:
            Set-Cookie:
              schema:
                type: string
        '401':
          description: Unauthorized, invalid login or password
        '409':
          description: Conflict, user already signed in (the session cookie is valid)
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/signout:
    post:
      tags:
        - authentication
      responses:
        '200':
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/delete:
    delete:
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized, invalid password
        '404':
          description: Current user not found
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/conversation/conversations:
    get:
      summary: Retrieve all conversations (headers) between the current user and others
      tags:
        - conversation
      responses:
        '200':
          description: Provide the list of the conversations between the user and others
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConversationDTO'
        '400':
          description: Bad request
        '404':
          description: Current user not found or conversations not found
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/conversation/newConversation/{interlocutor}:
    post:
      summary: Create a new (empty) conversation with a given user
      tags:
        - conversation
      parameters:
        - name: interlocutor
          in: path
          description: Username or peer address of the new interlocutor with whom to start a discussion
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Create the new conversation and return the header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDTO'
        '404':
          description: UserID not found in the users of the application
        '409':
          description: Conflict, a conversation already exists with the given UserID
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/conversation/{login}:
    get:
      summary: Search an existing conversation (the header) with a given user
      tags:
        - conversation
      parameters:
        - name: login
          in: path
          description: Username or peer address of the interlocutor from whom we want to retrieve the conversation
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Provide the header of the found conversation with the given user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDTO'
        '410':
          description: The conversation is no more available, has been deleted
        '404':
          description: UserID not found in the current user's list of conversations
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    delete:
      summary: Delete an existing conversation (the header and all contained messages) with a given user
      tags:
        - conversation
      parameters:
        - name: login
          in: path
          description: Username or peer address of the interlocutor from whom we want to delete the conversation
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success, conversation deleted
        '404':
          description: UserID not found in the current user's list of conversations
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/message/messages:
    get:
      summary: Get all user's messages
      description: Get all messages sent to or by the signed-in user. 
        Messages are returned from the newest to the oldest.
      tags:
        - message
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageDTO'
        '404':
          description: No conversation with this user
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/message:
    post:
      summary: Send a message
      description: Send a message on behalf of the signed-in user
      tags:
        - message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMessageDTO'
      responses:
        '200':
          description: Success sending the message
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
#  /user/message/{msgID}:
#    patch:
#      summary: Modify a certain message already sent
#      tags:
#        - message
#      parameters:
#        - name: msgID
#          in: path
#          description: ID of the message to modify in the list of messages
#          required: true
#          schema:
#            type: string
#            format: UUID
#      requestBody:
#        description: New content of the message
#        content:
#          application/json:
#            schema:
#              type: string
#      responses:
#        '200':
#          description: Success, return modified message
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/MessageDTO'
#        '410':
#          description: The message is no more available, has been deleted
#        default:
#          description: Error
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/ErrorDTO'
#    delete:
#      summary: Delete a message already sent
#      tags:
#        - message
#      parameters:
#        - name: msgID
#          in: path
#          description: ID of the message to delete in the list of messages
#          required: true
#          schema:
#            type: string
#            format: UUID
#      responses:
#        '200':
#          description: Success, message deleted
#        '404':
#          description: msgID not found in the list of messages
#        default:
#          description: Error
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/ErrorDTO'
  /user/shareMessage:
    post:
      summary: Post a new public message ("status") for all the current user friends and remove the previous one
      tags:
        - profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              description: Content of the message to share
              example : "Hello everybody"
      responses:
        '200':
          description: Success, reset the previous post and share the message
        '400':
          description: Error, the message is too long
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    delete:
      summary: Remove the previous shared message to make it empty
      tags:
        - profile
      responses:
        '200':
          description: Success, delete the message
        '410':
          description: No shared message to delete, already empty
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/profile:
    get:
      summary: Get the current information about the logged user
      tags:
        - profile
      responses:
        '200':
          description: Success, profile retrieved and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullUserDTO'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    patch:
      summary: Update information about the user
      tags:
        - profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullUserDTO'
      responses:
        '200':
          description: Success, profile updated
        '400':
          description: Error, information types not valid
        '401':
          description: Error, unvalid authentification
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/friend/{userID}:
    post:
      summary: Add a new contact to the current user's friends
      tags:
        - contact
      parameters:
        - name: userID
          in: path
          description: Username of the user to add
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Add the user in the list of contacts (friends) and return the header contact profil of the new friend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactProfileDTO'
        '410':
          description: The user has been deleted
        '404':
          description: UserID not found in the users of the application
        '409':
          description: UserID already existing in the list of friends
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    get:
      summary: Search an existing contact in the list of the current user's friends
      tags:
        - contact
      parameters:
        - name: userID
          in: path
          description: Username of the friend to search
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Provide the header of the found contact profile of the given username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactProfileDTO'
        '410':
          description: The user has been deleted
        '404':
          description: UserID not found in the current user's list of friends
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    delete:
      summary: Delete an existing contact (remove from the list of friends of the current user)
      tags:
        - contact
      parameters:
        - name: userID
          in: path
          description: Username of the friend to remove
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success, contact deleted
        '404':
          description: UserID not found in the current user's list of friends
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/friends:
    get:
      summary: Get the user's list of friends
      tags:
        - contact
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactProfileDTO'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

components:
  schemas:
    ErrorDTO:
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
    UserDTO:
      type: object
      properties:
        login:
          type: string
          example: anouk20
        password:
          type: string
          example: abc2001/n
        remember:
          type: boolean
          description: To choose if the user wants to remember their information for next time
          example: true
      required:
        - login
        - password
        - remember
    FullUserDTO:
      allOf:
        - $ref: '#/components/schemas/UserDTO'
        - type: object
          properties:
            icon:
              type: integer
              description: Number (ref) of the profile icon (image) of the user
              example: 6
            firstname:
              type: string
              example: Anouk
            lastname:
              type: string
              example: Migliavacca
            birthday:
              type: string
              example: 06-20-2001
            address:
              type: string
              example: anouk.mi@pingpal
          required:
            - icon
            - firstname
            - lastname
            - birthday
            - address

    ConversationDTO:
      type: object
      properties:
        userID:
          type: string
          description: Username of the interlocutor
          example: ambre_lv
        peerAddress:
          type: string
          example: alv@domain
        lastMessageDate:
          type: string
          description : Date of the last sent message to be able to sort conversations from the newest to the oldest
          example: 10-10-2023 12:30:22
      required:
        - peerAddress
        - lastMessageDate

    NewMessageDTO:
      description: New message information
      type: object
      required:
        - to
        - type
        - body
      properties:
        to:
          type: string
          example: lvhoa@pingpal
        type:
          type: string
          format: mime
          example: text/plain
        body:
          type: string
          example: This is the message
    MessageDTO:
      description: Message information
      allOf:
        - $ref: '#/components/schemas/NewMessageDTO'
        - type: object
          required:
            - id
            - timestamp
            - from
          properties:
            id:
              type: string
              format: uuid
              example: 667bdc23-3de4-482f-a0f4-3391452a7742
            timestamp:
              type: integer
              format: int64
              example: 1720294759999
            from:
              type: string
              example: anouk@pingpal
      properties:
        to:
          type: string
          example: lvhoa@pingpal
        type:
          type: string
          format: mime
          example: text/plain
        body:
          type: string
          example: This is the message

    ContactProfileDTO:
      type: object
      properties:
        userID:
          type: string
          description: Username (userID) of the contact
          example: ambre_lv
        peerAddress:
          type: string
          description: E-mail address of the contact
          example: alv@domain
        icon:
          type: integer
          description: Number (ref) of the profile icon (image) of the user
          example: 5
        firstname:
          type: string
          example: Ambre
        lastname:
          type: string
          example: Leveille
        birthday:
          type: string
          example: 11-05-2003
        sharedMessage:
          type: string
          description: Content of the public message (status) shared by the contact (can be empty)
          example: Hi everybody!
      required:
        - userID
        - peerAddress
        - icon
        - firstname
        - lastname
        - birthday

  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID
      description: Use a session cookie to authenticate (see /login).
x-samples-languages:
  - curl
  - javascript
  - node
  - java
  - python
  - php
