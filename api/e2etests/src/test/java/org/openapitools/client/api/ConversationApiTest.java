/*
 * CPOO Server API
 * This is a prototype of CPOO Project's front/back API. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@mightycode.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import okhttp3.OkHttpClient;
import org.apache.http.HttpStatus;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConversationDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.openapitools.client.model.FullUserDTO;
import org.openapitools.client.model.UserDTO;

import java.util.List;



/**
 * API tests for ConversationApi
 */
@Disabled
public class ConversationApiTest {

    private final ConversationApi api = new ConversationApi();
    private final AuthenticationApi authApi = new AuthenticationApi();
    @BeforeEach
    public void init() {
        // Simulate the behavior of a web browser by remembering cookies set by the server
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        OkHttpClient okHttpClient = builder.cookieJar(new MyCookieJar()).build();
        ApiClient apiClient = new ApiClient(okHttpClient);
        api.setApiClient(apiClient);
        authApi.setApiClient(apiClient);
    }

    /**
     * Retrieve all conversations (headers) between the current user and others
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userConversationConversationsGetTest() throws ApiException {
        // Getting the conversations without being signed in should fail with FORBIDDEN
        try {
            api.userConversationConversationsGet();
            Assertions.fail();
        }
        catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }

        // Signing up and in
        FullUserDTO user = new FullUserDTO().login("testerConvGetAll").password("test").remember(true).icon(1)
                .firstname("test").lastname("test").birthday("10-10-2000").address("test@test");
        authApi.userSignupPost(user);
        authApi.userSigninPost(new UserDTO().login("testerConvGetAll").password("test").remember(false));

        // The conversations should first be empty
        List<ConversationDTO> conv = api.userConversationConversationsGet();
       Assertions.assertTrue(conv.isEmpty());

        // Creating a new conversation
        api.userConversationNewConversationInterlocutorPost("friendGetAll");
        // Now there should be one conversation
        List<ConversationDTO> conv2 = api.userConversationConversationsGet();
        Assertions.assertEquals(1,conv2.size());

        //deleting instances
        api.userConversationLoginDelete("friendGetAll");
        authApi.userDeleteDelete(new UserDTO().login("testerConvGetAll").password("test").remember(false));
    }

    /**
     * Delete an existing conversation (the header and all contained messages) with a given user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userConversationLoginDeleteTest() throws ApiException {
        // Deleting conversation without being signed in should fail with FORBIDDEN
        try {
            api.userConversationLoginDelete("user");
            Assertions.fail();
        }
        catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }

        // Signing up and in
        FullUserDTO user = new FullUserDTO().login("testerConvDel").password("test").remember(true).icon(1)
                .firstname("test").lastname("test").birthday("10-10-2000").address("test@test");
        authApi.userSignupPost(user);
        authApi.userSigninPost(new UserDTO().login("testerConvDel").password("test").remember(false));

        // Deleting an inexisting conversation should fail with NOT FOUND
        try {
            api.userConversationLoginDelete("inexistant");
            Assertions.fail();
        }
        catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_NOT_FOUND, e.getCode());
        }

        // Creating a conversation
        api.userConversationNewConversationInterlocutorPost("friendDel");
        // Deleting the conversation should now work
        api.userConversationLoginDelete("friendDel");

        //deleting instance
        authApi.userDeleteDelete(new UserDTO().login("testerConvDel").password("test").remember(false));
    }

    /**
     * Search an existing conversation (the header) with a given user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userConversationLoginGetTest() throws ApiException {
        // Getting conversation without being signed in should fail with FORBIDDEN
        try {
            api.userConversationLoginGet("user");
            Assertions.fail();
        }
        catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }

        // Signing up and in
        FullUserDTO user = new FullUserDTO().login("testerConvGet").password("test").remember(true).icon(1)
                .firstname("test").lastname("test").birthday("10-10-2000").address("test@test");
        authApi.userSignupPost(user);
        authApi.userSigninPost(new UserDTO().login("testerConvGet").password("test").remember(false));

        // Getting conversation with an inexistant user should fail with NOT FOUND
        try {
            api.userConversationLoginGet("inexistant");
            Assertions.fail();
        }
        catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_NOT_FOUND, e.getCode());
        }

        // Create a new conversation
        api.userConversationNewConversationInterlocutorPost("friendGet");
        // Now getting the conversation should work
        ConversationDTO conv = api.userConversationLoginGet("friendGet");
        // The conversation should be so
        Assertions.assertEquals("friendGet", conv.getUserID());

        //deleting instances
        api.userConversationLoginDelete("friendGet");
        authApi.userDeleteDelete(new UserDTO().login("testerConvGet").password("test").remember(false));
    }

    /**
     * Create a new (empty) conversation with a given user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userConversationNewConversationInterlocutorPostTest() throws ApiException {
        // Creating a new conversation without signing in should fail with FORBIDDEN
        try {
            api.userConversationNewConversationInterlocutorPost("user");
            Assertions.fail();
        }
        catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }

        // Signing up and in
        FullUserDTO user = new FullUserDTO().login("testerConv").password("test").remember(true).icon(1)
                .firstname("test").lastname("test").birthday("10-10-2000").address("test@test");
        authApi.userSignupPost(user);
        authApi.userSigninPost(new UserDTO().login("testerConv").password("test").remember(false));
        //Creating a new conversation should work
        ConversationDTO conv= api.userConversationNewConversationInterlocutorPost("friendNew");
        //The conversation should be so
        Assertions.assertEquals("friendNew@pingpal", conv.getPeerAddress());

        // Creating again the conversation should fail with CONFLICT
        try {
            api.userConversationNewConversationInterlocutorPost("friendNew");
            Assertions.fail();
        }
        catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_CONFLICT, e.getCode());
        }

        //deleting instances
        api.userConversationLoginDelete("friendNew");
        authApi.userDeleteDelete(new UserDTO().login("testerConv").password("test").remember(false));
    }

}
