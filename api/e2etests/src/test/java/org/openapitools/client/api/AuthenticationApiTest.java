/*
 * CPOO Server API
 * This is a prototype of CPOO Project's front/back API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@mightycode.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.apache.http.HttpStatus;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.model.UserDTO;

/**
 * API tests for AuthenticationApi
 */
public class AuthenticationApiTest {

    private final AuthenticationApi api = new AuthenticationApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userSigninPostTest() throws ApiException {

        // Signing in with valid credential should work
        UserDTO userDTO = new UserDTO().login("user").password("user");
        api.userSigninPost(userDTO);

        // Signing in with invalid credentials should fail with UNAUTHORIZED
        try {
            api.userSigninPost(userDTO.password("invalid"));
            Assertions.fail();
        }
        catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_UNAUTHORIZED, e.getCode());
        }
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userSignoutPostTest() throws ApiException {

        // Sign in and read the JSESSIONID authentication cookie
        UserDTO userDTO = new UserDTO().login("user").password("user");
        ApiResponse<Void> apiResponse = api.userSigninPostWithHttpInfo(userDTO);
        String setCookieHeader = apiResponse.getHeaders().get("Set-Cookie").get(0);
        String jSessionID = setCookieHeader.split("=")[1].split(";")[0];

        // Set a valid session authentication cookie for subsequent calls
        api.getApiClient().setApiKey(jSessionID);

        // Sign in again with a valid session should fail with CONFLICT
        // TODO: fix this
//        try {
//            api.userSigninPost(userDTO);
//            Assertions.fail();
//        }
//        catch (ApiException e) {
//            Assertions.assertEquals(HttpStatus.SC_CONFLICT, e.getCode());
//        }

        // Signing out with a valid session should work
        api.userSignoutPost();

        // Signing out twice should fail with FORBIDDEN
        try {
            api.userSignoutPost();
            Assertions.fail();
        }
        catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }

        // Sign in again
        api.userSigninPost(userDTO);

        // Signing out with an invalid session should fail with FORBIDDEN
        try {
            api.userSignoutPost();
            Assertions.fail();
        }
        catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userSignupPostTest() throws ApiException {

        // Signing up with a new account should work
        UserDTO userDTO = new UserDTO().login("test").password("test");
        api.userSignupPost(userDTO);

        // Signing up twice with the same account should fail with CONFLICT
        try {
            api.userSignupPost(userDTO);
            Assertions.fail();
        }
        catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_CONFLICT, e.getCode());
        }
    }
}
