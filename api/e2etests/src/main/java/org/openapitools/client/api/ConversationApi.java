/*
 * CPOO Server API
 * This is a prototype of CPOO Project's front/back API. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@mightycode.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConversationDTO;
import org.openapitools.client.model.ErrorDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConversationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConversationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConversationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for userConversationConversationsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provide the list of the conversations between the user and others </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userConversationConversationsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/conversation/conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userConversationConversationsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return userConversationConversationsGetCall(_callback);

    }

    /**
     * Retrieve all conversations (headers) between the current user and others
     * 
     * @return List&lt;ConversationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provide the list of the conversations between the user and others </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ConversationDTO> userConversationConversationsGet() throws ApiException {
        ApiResponse<List<ConversationDTO>> localVarResp = userConversationConversationsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve all conversations (headers) between the current user and others
     * 
     * @return ApiResponse&lt;List&lt;ConversationDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provide the list of the conversations between the user and others </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ConversationDTO>> userConversationConversationsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userConversationConversationsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ConversationDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all conversations (headers) between the current user and others (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provide the list of the conversations between the user and others </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userConversationConversationsGetAsync(final ApiCallback<List<ConversationDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userConversationConversationsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ConversationDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userConversationLoginDelete
     * @param login Username or peer address of the interlocutor from whom we want to delete the conversation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success, conversation deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the current user&#39;s list of conversations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userConversationLoginDeleteCall(String login, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/conversation/{login}"
            .replace("{" + "login" + "}", localVarApiClient.escapeString(login.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userConversationLoginDeleteValidateBeforeCall(String login, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'login' is set
        if (login == null) {
            throw new ApiException("Missing the required parameter 'login' when calling userConversationLoginDelete(Async)");
        }

        return userConversationLoginDeleteCall(login, _callback);

    }

    /**
     * Delete an existing conversation (the header and all contained messages) with a given user
     * 
     * @param login Username or peer address of the interlocutor from whom we want to delete the conversation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success, conversation deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the current user&#39;s list of conversations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void userConversationLoginDelete(String login) throws ApiException {
        userConversationLoginDeleteWithHttpInfo(login);
    }

    /**
     * Delete an existing conversation (the header and all contained messages) with a given user
     * 
     * @param login Username or peer address of the interlocutor from whom we want to delete the conversation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success, conversation deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the current user&#39;s list of conversations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userConversationLoginDeleteWithHttpInfo(String login) throws ApiException {
        okhttp3.Call localVarCall = userConversationLoginDeleteValidateBeforeCall(login, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an existing conversation (the header and all contained messages) with a given user (asynchronously)
     * 
     * @param login Username or peer address of the interlocutor from whom we want to delete the conversation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success, conversation deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the current user&#39;s list of conversations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userConversationLoginDeleteAsync(String login, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userConversationLoginDeleteValidateBeforeCall(login, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userConversationLoginGet
     * @param login Username or peer address of the interlocutor from whom we want to retrieve the conversation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provide the header of the found conversation with the given user </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> The conversation is no more available, has been deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the current user&#39;s list of conversations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userConversationLoginGetCall(String login, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/conversation/{login}"
            .replace("{" + "login" + "}", localVarApiClient.escapeString(login.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userConversationLoginGetValidateBeforeCall(String login, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'login' is set
        if (login == null) {
            throw new ApiException("Missing the required parameter 'login' when calling userConversationLoginGet(Async)");
        }

        return userConversationLoginGetCall(login, _callback);

    }

    /**
     * Search an existing conversation (the header) with a given user
     * 
     * @param login Username or peer address of the interlocutor from whom we want to retrieve the conversation (required)
     * @return ConversationDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provide the header of the found conversation with the given user </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> The conversation is no more available, has been deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the current user&#39;s list of conversations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ConversationDTO userConversationLoginGet(String login) throws ApiException {
        ApiResponse<ConversationDTO> localVarResp = userConversationLoginGetWithHttpInfo(login);
        return localVarResp.getData();
    }

    /**
     * Search an existing conversation (the header) with a given user
     * 
     * @param login Username or peer address of the interlocutor from whom we want to retrieve the conversation (required)
     * @return ApiResponse&lt;ConversationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provide the header of the found conversation with the given user </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> The conversation is no more available, has been deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the current user&#39;s list of conversations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationDTO> userConversationLoginGetWithHttpInfo(String login) throws ApiException {
        okhttp3.Call localVarCall = userConversationLoginGetValidateBeforeCall(login, null);
        Type localVarReturnType = new TypeToken<ConversationDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search an existing conversation (the header) with a given user (asynchronously)
     * 
     * @param login Username or peer address of the interlocutor from whom we want to retrieve the conversation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provide the header of the found conversation with the given user </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> The conversation is no more available, has been deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the current user&#39;s list of conversations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userConversationLoginGetAsync(String login, final ApiCallback<ConversationDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = userConversationLoginGetValidateBeforeCall(login, _callback);
        Type localVarReturnType = new TypeToken<ConversationDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userConversationNewConversationInterlocutorPost
     * @param interlocutor Username or peer address of the new interlocutor with whom to start a discussion (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create the new conversation and return the header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the users of the application </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict, a conversation already exists with the given UserID </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userConversationNewConversationInterlocutorPostCall(String interlocutor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/conversation/newConversation/{interlocutor}"
            .replace("{" + "interlocutor" + "}", localVarApiClient.escapeString(interlocutor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userConversationNewConversationInterlocutorPostValidateBeforeCall(String interlocutor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'interlocutor' is set
        if (interlocutor == null) {
            throw new ApiException("Missing the required parameter 'interlocutor' when calling userConversationNewConversationInterlocutorPost(Async)");
        }

        return userConversationNewConversationInterlocutorPostCall(interlocutor, _callback);

    }

    /**
     * Create a new (empty) conversation with a given user
     * 
     * @param interlocutor Username or peer address of the new interlocutor with whom to start a discussion (required)
     * @return ConversationDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create the new conversation and return the header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the users of the application </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict, a conversation already exists with the given UserID </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ConversationDTO userConversationNewConversationInterlocutorPost(String interlocutor) throws ApiException {
        ApiResponse<ConversationDTO> localVarResp = userConversationNewConversationInterlocutorPostWithHttpInfo(interlocutor);
        return localVarResp.getData();
    }

    /**
     * Create a new (empty) conversation with a given user
     * 
     * @param interlocutor Username or peer address of the new interlocutor with whom to start a discussion (required)
     * @return ApiResponse&lt;ConversationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create the new conversation and return the header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the users of the application </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict, a conversation already exists with the given UserID </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationDTO> userConversationNewConversationInterlocutorPostWithHttpInfo(String interlocutor) throws ApiException {
        okhttp3.Call localVarCall = userConversationNewConversationInterlocutorPostValidateBeforeCall(interlocutor, null);
        Type localVarReturnType = new TypeToken<ConversationDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new (empty) conversation with a given user (asynchronously)
     * 
     * @param interlocutor Username or peer address of the new interlocutor with whom to start a discussion (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create the new conversation and return the header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the users of the application </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict, a conversation already exists with the given UserID </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userConversationNewConversationInterlocutorPostAsync(String interlocutor, final ApiCallback<ConversationDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = userConversationNewConversationInterlocutorPostValidateBeforeCall(interlocutor, _callback);
        Type localVarReturnType = new TypeToken<ConversationDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
