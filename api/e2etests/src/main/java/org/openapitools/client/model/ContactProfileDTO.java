/*
 * CPOO Server API
 * This is a prototype of CPOO Project's front/back API. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@mightycode.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContactProfileDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ContactProfileDTO {
  public static final String SERIALIZED_NAME_USER_I_D = "userID";
  @SerializedName(SERIALIZED_NAME_USER_I_D)
  private String userID;

  public static final String SERIALIZED_NAME_PEER_ADDRESS = "peerAddress";
  @SerializedName(SERIALIZED_NAME_PEER_ADDRESS)
  private String peerAddress;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private Integer icon;

  public static final String SERIALIZED_NAME_FIRSTNAME = "firstname";
  @SerializedName(SERIALIZED_NAME_FIRSTNAME)
  private String firstname;

  public static final String SERIALIZED_NAME_LASTNAME = "lastname";
  @SerializedName(SERIALIZED_NAME_LASTNAME)
  private String lastname;

  public static final String SERIALIZED_NAME_BIRTHDAY = "birthday";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY)
  private OffsetDateTime birthday;

  public static final String SERIALIZED_NAME_SHARED_MESSAGE = "sharedMessage";
  @SerializedName(SERIALIZED_NAME_SHARED_MESSAGE)
  private String sharedMessage;

  public ContactProfileDTO() {
  }

  public ContactProfileDTO userID(String userID) {
    
    this.userID = userID;
    return this;
  }

   /**
   * Username (userID) of the contact
   * @return userID
  **/
  @javax.annotation.Nonnull
  public String getUserID() {
    return userID;
  }


  public void setUserID(String userID) {
    this.userID = userID;
  }


  public ContactProfileDTO peerAddress(String peerAddress) {
    
    this.peerAddress = peerAddress;
    return this;
  }

   /**
   * E-mail address of the contact
   * @return peerAddress
  **/
  @javax.annotation.Nonnull
  public String getPeerAddress() {
    return peerAddress;
  }


  public void setPeerAddress(String peerAddress) {
    this.peerAddress = peerAddress;
  }


  public ContactProfileDTO icon(Integer icon) {
    
    this.icon = icon;
    return this;
  }

   /**
   * Number (ref) of the profile icon (image) of the user
   * @return icon
  **/
  @javax.annotation.Nonnull
  public Integer getIcon() {
    return icon;
  }


  public void setIcon(Integer icon) {
    this.icon = icon;
  }


  public ContactProfileDTO firstname(String firstname) {
    
    this.firstname = firstname;
    return this;
  }

   /**
   * Get firstname
   * @return firstname
  **/
  @javax.annotation.Nonnull
  public String getFirstname() {
    return firstname;
  }


  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }


  public ContactProfileDTO lastname(String lastname) {
    
    this.lastname = lastname;
    return this;
  }

   /**
   * Get lastname
   * @return lastname
  **/
  @javax.annotation.Nonnull
  public String getLastname() {
    return lastname;
  }


  public void setLastname(String lastname) {
    this.lastname = lastname;
  }


  public ContactProfileDTO birthday(OffsetDateTime birthday) {
    
    this.birthday = birthday;
    return this;
  }

   /**
   * Get birthday
   * @return birthday
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getBirthday() {
    return birthday;
  }


  public void setBirthday(OffsetDateTime birthday) {
    this.birthday = birthday;
  }


  public ContactProfileDTO sharedMessage(String sharedMessage) {
    
    this.sharedMessage = sharedMessage;
    return this;
  }

   /**
   * Content of the public message (status) shared by the contact (can be empty)
   * @return sharedMessage
  **/
  @javax.annotation.Nullable
  public String getSharedMessage() {
    return sharedMessage;
  }


  public void setSharedMessage(String sharedMessage) {
    this.sharedMessage = sharedMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactProfileDTO contactProfileDTO = (ContactProfileDTO) o;
    return Objects.equals(this.userID, contactProfileDTO.userID) &&
        Objects.equals(this.peerAddress, contactProfileDTO.peerAddress) &&
        Objects.equals(this.icon, contactProfileDTO.icon) &&
        Objects.equals(this.firstname, contactProfileDTO.firstname) &&
        Objects.equals(this.lastname, contactProfileDTO.lastname) &&
        Objects.equals(this.birthday, contactProfileDTO.birthday) &&
        Objects.equals(this.sharedMessage, contactProfileDTO.sharedMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userID, peerAddress, icon, firstname, lastname, birthday, sharedMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactProfileDTO {\n");
    sb.append("    userID: ").append(toIndentedString(userID)).append("\n");
    sb.append("    peerAddress: ").append(toIndentedString(peerAddress)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    sharedMessage: ").append(toIndentedString(sharedMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("userID");
    openapiFields.add("peerAddress");
    openapiFields.add("icon");
    openapiFields.add("firstname");
    openapiFields.add("lastname");
    openapiFields.add("birthday");
    openapiFields.add("sharedMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("userID");
    openapiRequiredFields.add("peerAddress");
    openapiRequiredFields.add("icon");
    openapiRequiredFields.add("firstname");
    openapiRequiredFields.add("lastname");
    openapiRequiredFields.add("birthday");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContactProfileDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContactProfileDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactProfileDTO is not found in the empty JSON string", ContactProfileDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContactProfileDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContactProfileDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContactProfileDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("userID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userID").toString()));
      }
      if (!jsonObj.get("peerAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peerAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peerAddress").toString()));
      }
      if (!jsonObj.get("firstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstname").toString()));
      }
      if (!jsonObj.get("lastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastname").toString()));
      }
      if ((jsonObj.get("sharedMessage") != null && !jsonObj.get("sharedMessage").isJsonNull()) && !jsonObj.get("sharedMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactProfileDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactProfileDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactProfileDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactProfileDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactProfileDTO>() {
           @Override
           public void write(JsonWriter out, ContactProfileDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactProfileDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContactProfileDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContactProfileDTO
  * @throws IOException if the JSON string is invalid with respect to ContactProfileDTO
  */
  public static ContactProfileDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactProfileDTO.class);
  }

 /**
  * Convert an instance of ContactProfileDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

