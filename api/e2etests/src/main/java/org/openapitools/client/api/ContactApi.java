/*
 * CPOO Server API
 * This is a prototype of CPOO Project's front/back API. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@mightycode.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ContactProfileDTO;
import org.openapitools.client.model.ErrorDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContactApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContactApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContactApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for userFriendUserIDDelete
     * @param userID Username of the friend to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success, contact deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the current user&#39;s list of friends </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userFriendUserIDDeleteCall(String userID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/friend/{userID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userFriendUserIDDeleteValidateBeforeCall(String userID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling userFriendUserIDDelete(Async)");
        }

        return userFriendUserIDDeleteCall(userID, _callback);

    }

    /**
     * Delete an existing contact (remove from the list of friends of the current user)
     * 
     * @param userID Username of the friend to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success, contact deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the current user&#39;s list of friends </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void userFriendUserIDDelete(String userID) throws ApiException {
        userFriendUserIDDeleteWithHttpInfo(userID);
    }

    /**
     * Delete an existing contact (remove from the list of friends of the current user)
     * 
     * @param userID Username of the friend to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success, contact deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the current user&#39;s list of friends </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userFriendUserIDDeleteWithHttpInfo(String userID) throws ApiException {
        okhttp3.Call localVarCall = userFriendUserIDDeleteValidateBeforeCall(userID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an existing contact (remove from the list of friends of the current user) (asynchronously)
     * 
     * @param userID Username of the friend to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success, contact deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the current user&#39;s list of friends </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userFriendUserIDDeleteAsync(String userID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userFriendUserIDDeleteValidateBeforeCall(userID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userFriendUserIDGet
     * @param userID Username of the friend to search (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provide the header of the found contact profil of the given username </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> The user has been deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the current user&#39;s list of friends </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userFriendUserIDGetCall(String userID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/friend/{userID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userFriendUserIDGetValidateBeforeCall(String userID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling userFriendUserIDGet(Async)");
        }

        return userFriendUserIDGetCall(userID, _callback);

    }

    /**
     * Search an existing contact in the list of the current user&#39;s friends
     * 
     * @param userID Username of the friend to search (required)
     * @return ContactProfileDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provide the header of the found contact profil of the given username </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> The user has been deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the current user&#39;s list of friends </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ContactProfileDTO userFriendUserIDGet(String userID) throws ApiException {
        ApiResponse<ContactProfileDTO> localVarResp = userFriendUserIDGetWithHttpInfo(userID);
        return localVarResp.getData();
    }

    /**
     * Search an existing contact in the list of the current user&#39;s friends
     * 
     * @param userID Username of the friend to search (required)
     * @return ApiResponse&lt;ContactProfileDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provide the header of the found contact profil of the given username </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> The user has been deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the current user&#39;s list of friends </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactProfileDTO> userFriendUserIDGetWithHttpInfo(String userID) throws ApiException {
        okhttp3.Call localVarCall = userFriendUserIDGetValidateBeforeCall(userID, null);
        Type localVarReturnType = new TypeToken<ContactProfileDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search an existing contact in the list of the current user&#39;s friends (asynchronously)
     * 
     * @param userID Username of the friend to search (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provide the header of the found contact profil of the given username </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> The user has been deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the current user&#39;s list of friends </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userFriendUserIDGetAsync(String userID, final ApiCallback<ContactProfileDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = userFriendUserIDGetValidateBeforeCall(userID, _callback);
        Type localVarReturnType = new TypeToken<ContactProfileDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userFriendUserIDPost
     * @param userID Username of the user to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add the user in the list of contacts (friends) and return the header contact profil of the new friend </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> The user has been deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the users of the application </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> UserID already existing in the list of friends </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userFriendUserIDPostCall(String userID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/friend/{userID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userFriendUserIDPostValidateBeforeCall(String userID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling userFriendUserIDPost(Async)");
        }

        return userFriendUserIDPostCall(userID, _callback);

    }

    /**
     * Add a new contact to the current user&#39;s friends
     * 
     * @param userID Username of the user to add (required)
     * @return ContactProfileDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add the user in the list of contacts (friends) and return the header contact profil of the new friend </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> The user has been deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the users of the application </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> UserID already existing in the list of friends </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ContactProfileDTO userFriendUserIDPost(String userID) throws ApiException {
        ApiResponse<ContactProfileDTO> localVarResp = userFriendUserIDPostWithHttpInfo(userID);
        return localVarResp.getData();
    }

    /**
     * Add a new contact to the current user&#39;s friends
     * 
     * @param userID Username of the user to add (required)
     * @return ApiResponse&lt;ContactProfileDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add the user in the list of contacts (friends) and return the header contact profil of the new friend </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> The user has been deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the users of the application </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> UserID already existing in the list of friends </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactProfileDTO> userFriendUserIDPostWithHttpInfo(String userID) throws ApiException {
        okhttp3.Call localVarCall = userFriendUserIDPostValidateBeforeCall(userID, null);
        Type localVarReturnType = new TypeToken<ContactProfileDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new contact to the current user&#39;s friends (asynchronously)
     * 
     * @param userID Username of the user to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add the user in the list of contacts (friends) and return the header contact profil of the new friend </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> The user has been deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserID not found in the users of the application </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> UserID already existing in the list of friends </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userFriendUserIDPostAsync(String userID, final ApiCallback<ContactProfileDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = userFriendUserIDPostValidateBeforeCall(userID, _callback);
        Type localVarReturnType = new TypeToken<ContactProfileDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userFriendsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userFriendsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/friends";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userFriendsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return userFriendsGetCall(_callback);

    }

    /**
     * Get the user&#39;s list of friends
     * 
     * @return List&lt;ContactProfileDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ContactProfileDTO> userFriendsGet() throws ApiException {
        ApiResponse<List<ContactProfileDTO>> localVarResp = userFriendsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the user&#39;s list of friends
     * 
     * @return ApiResponse&lt;List&lt;ContactProfileDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContactProfileDTO>> userFriendsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userFriendsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ContactProfileDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user&#39;s list of friends (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userFriendsGetAsync(final ApiCallback<List<ContactProfileDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userFriendsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ContactProfileDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
